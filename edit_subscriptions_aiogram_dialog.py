from datetime import date
from typing import List

from aiogram.types import CallbackQuery
from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.widgets.kbd import Button, Row, Group, Calendar
from aiogram_dialog.widgets.text import Const

from states_class_aiogram_dialog import EditSubscriptions, SecondDialogSG
from subscription_list_aiogram_dialog import go_start


# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏
async def on_date_selected(callback: CallbackQuery, widget, manager: DialogManager, selected_date: date):
    """–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–±–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–±—Ä–∞–Ω–æ—ó –¥–∞—Ç–∏ –∑—ñ —Å–ø–∏—Å–∫—É."""
    selected_dates: List[date] = manager.dialog_data.get("selected_dates", [])

    if selected_date in selected_dates:
        selected_dates.remove(selected_date)  # –í–∏–¥–∞–ª—è—î–º–æ, —è–∫—â–æ –¥–∞—Ç–∞ –≤–∂–µ –±—É–ª–∞ –æ–±—Ä–∞–Ω–∞
    else:
        selected_dates.append(selected_date)  # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É –¥–∞—Ç—É

    # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ –¥—ñ–∞–ª–æ–∑—ñ
    manager.dialog_data["selected_dates"] = selected_dates

    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–±—Ä–∞–Ω–∏–º–∏ –¥–∞—Ç–∞–º–∏
    dates_text = ", ".join([str(d) for d in selected_dates])

    # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –≤–æ–Ω–æ –∑–∞–ª–∏—à–∞–ª–æ—Å—è –Ω–∞ –µ–∫—Ä–∞–Ω—ñ
    await callback.message.edit_text(f"–í–∏–±—Ä–∞–Ω—ñ –¥–∞—Ç–∏: {dates_text}")


# –ö–∞–ª–µ–Ω–¥–∞—Ä –¥–ª—è –≤–∏–±–æ—Ä—É –¥–∞—Ç
calendar = Calendar(id="calendar", on_click=on_date_selected)


# –û–±—Ä–æ–±–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É –¥–∞—Ç
async def finish_selection(callback: CallbackQuery, button: Button, manager: DialogManager):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É –¥–∞—Ç —Ç–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É."""
    selected_dates = manager.dialog_data.get("selected_dates", [])
    dates_text = ", ".join([str(d) for d in selected_dates])
    await callback.message.answer(f"–í–∞—à –æ—Å—Ç–∞—Ç–æ—á–Ω–∏–π –≤–∏–±—ñ—Ä: {dates_text}")
    await manager.done()


# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —É –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
async def edit_publication_time(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    await callback.message.answer("üïí –ß–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –±—É–¥–µ –∑–º—ñ–Ω–µ–Ω–æ.")

async def pause_publication(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    await callback.message.answer("‚è∏ –ü—É–±–ª—ñ–∫–∞—Ü—ñ—é –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ.")

async def add_poll(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    await callback.message.answer("üìä –û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ.")

async def send_cat(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    await callback.message.answer("–û—Å—å –≤–∞—à –∫–æ—Ç–∏–∫! üêà")
    await callback.answer()

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –º–æ–≤–∏
async def on_language_selected(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    selected_language = button.widget_id
    message = MESSAGES.get(selected_language, f"Selected language: {selected_language}")
    await callback.message.answer(message)
    await dialog_manager.switch_to(EditSubscriptions.edit)

async def select_language(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    await dialog_manager.switch_to(EditSubscriptions.select_language)

async def back_to_subscription_details(callback: CallbackQuery, button: Button,
                                       dialog_manager: DialogManager):
    await dialog_manager.done()
    await dialog_manager.switch_to(SecondDialogSG.second)

# –°–ª–æ–≤–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ä—ñ–∑–Ω–∏–º–∏ –º–æ–≤–∞–º–∏
MESSAGES = {
    "uk": "–í–∏ –æ–±—Ä–∞–ª–∏ –º–æ–≤—É: –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
    "en": "You selected the language: English",
    "ru": "–í—ã –≤—ã–±—Ä–∞–ª–∏: –†—É—Å—Å–∫–∏–π",
    "de": "Sie haben die Sprache gew√§hlt: Deutsch",
}

# –í—ñ–∫–Ω–æ –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏
select_language_window = Window(
    Const("<b>–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:</b>"),
    Group(
        Row(
            Button(Const("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"), id="uk", on_click=on_language_selected),
            Button(Const("English"), id="en", on_click=on_language_selected),
        ),
        Row(
            Button(Const("–†—É—Å—Å–∫–∏–π"), id="ru", on_click=on_language_selected),
            Button(Const("Deutsch"), id="de", on_click=on_language_selected),
        ),
    ),
    Button(Const("–ù–∞–∑–∞–¥"), id="back_to_edit",
           on_click=lambda c, b, d: d.switch_to(EditSubscriptions.edit)),
    state=EditSubscriptions.select_language,
)

# –ì–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏
edit_subscription_window = Window(
    Const("<b>–û–ø—Ü—ñ—ó —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏</b>\n"),
    Row(
        Button(Const("–ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó üïí"), id="change_time",
               on_click=edit_publication_time),
        Button(Const("–ü—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é ‚è∏"), id="pause_publication", on_click=pause_publication),
    ),
    Row(
        Button(Const("–î–æ–¥–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è üìä"), id="add_poll", on_click=add_poll),
        Button(Const("–í–∏—Å–ª–∞—Ç–∏ –∫–æ—Ç–∏–∫–∞ üêà"), id="send_cat", on_click=send_cat),
    ),
    Row(
        Button(Const("–í–∏–±—Ä–∞—Ç–∏ –º–æ–≤—É"), id="select_language", on_click=select_language),
        Button(Const("–ö–∞–ª–µ–Ω–¥–∞—Ä"), id="open_calendar",
               on_click=lambda c, b, d: d.switch_to(EditSubscriptions.calendar)),
    ),
    Button(Const("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥"), id="back_button", on_click=back_to_subscription_details),
    Button(Const("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –º–µ–Ω—é"), id="button_start", on_click=go_start),
    state=EditSubscriptions.edit,
)

# –í—ñ–∫–Ω–æ –∑ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º —Ç–∞ –∫–Ω–æ–ø–∫–æ—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
calendar_window = Window(
    Const("<b>–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç–∏:</b>"),
    calendar,
    Button(Const("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä"), id="finish", on_click=finish_selection),
    Button(Const("–ù–∞–∑–∞–¥"), id="back_to_edit", on_click=lambda c, b, d: d.switch_to(EditSubscriptions.edit)),
    state=EditSubscriptions.calendar,
)


# –û–±'—î–¥–Ω–∞–Ω–Ω—è –≤—ñ–∫–æ–Ω —É –¥—ñ–∞–ª–æ–≥
edit_subscription_dialog = Dialog(
    edit_subscription_window,
    select_language_window,
    calendar_window,
)
